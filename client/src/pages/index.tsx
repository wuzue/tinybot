import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import styles from '@/styles/Home.module.css'
import { useEffect, useState, useRef, MutableRefObject } from 'react'
import ScrollToBottom from "react-scroll-to-bottom";

const inter = Inter({ subsets: ['latin'] })

export default function Home() {
  const [messages, setMessages] = useState<any>([])
  const messagesEndRef = useRef() as MutableRefObject<HTMLDivElement>

  function generateBotResponse(message: string){
    if(message === 'oi'){
      return 'Oi, tudo bem?'
    }else if(message === 'tudo'){
      return 'Que bom!'
    }else{
      return 'Ainda nÃ£o entendo o que isso quer dizer :/'
    }
  }

  // const handleMessages = () => {
  //   const message = (document.getElementById('message-input') as HTMLInputElement | HTMLTextAreaElement).value;
  //   if(message){
  //   setMessages((prevMessages:string[]) => [...prevMessages, message]);
  //   const botResponse = generateBotResponse(message);
  //   setMessages((prevMessages:string[]) => [...messages, botResponse]);
  //     (document.getElementById('message-input') as HTMLInputElement | HTMLTextAreaElement).value = '';
  //   }
  // }

  const handleMessages = () => {
    const inputElement = (document.getElementById('message-input') as HTMLInputElement | HTMLTextAreaElement)
    const messageText = inputElement.value
    if(messageText){
      const newMessage = { text: messageText, from: 'user'}
      setMessages((prevMessages: string[]) => [...prevMessages, newMessage])
      inputElement.value = ''

      const botResponse = generateBotResponse(messageText)
      const newBotMessage = { text: botResponse, from: 'bot'}
      setMessages((prevMessages:string[]) => [...prevMessages, newBotMessage])
    }
  }

  useEffect(() => {
    messagesEndRef.current.scrollIntoView({ behavior: 'smooth' })
  }, [messages])

  return (
    <>
      <Head>
        <title>Gepeteco</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="flex flex-col h-screen border-[1rem] w-[50%] m-auto">
          <p className='text-center font-bold text-[1.1rem] bg-blue-100'>GePeTeco</p>
            <div className="flex-grow bg-gray-100 bg-blue-50" id='screen' style={{overflowY: 'scroll'}}>
              {messages.map((message:string[], index: number) => (
                <div key={index} className={`flex ${message.from === 'user' ? 'justify-end' : 'justify-start'}`}>
                  <span className='flex border-[1px] inline-block w-auto p-2 rounded-full bg-gray-200 m-2'>
                    {message.text}
                  </span>
                </div>
              ))}
              {/* {messages.map((message:any, index:any) =>(
              <div key={index} className='flex justify-end'><span className='flex justify-end border-[1px] inline-block w-auto p-2 rounded-full bg-gray-200 m-2'>{message}</span></div>
              ))} */}
              <div ref={messagesEndRef}/>
            </div>
        <div className="p-4 flex bg-blue-100">
          <textarea id='message-input' className="w-full h-16 border border-gray-300 rounded-md resize-none p-2" placeholder="Type your message"></textarea>
          <button className="bg-blue-500 text-white px-4 py-2 rounded-md ml-2" onClick={handleMessages}>Send</button>
        </div>
        </div>
      </main>
    </>
  )
}
